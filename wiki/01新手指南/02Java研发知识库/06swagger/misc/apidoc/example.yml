openapi: "3.0.1"
info:
  description: "Swagger文档编写例子"
  version: "1.0.0"
  title: "Swagger API Example"
  contact:
    email: "chenlei@lidig.com"

servers:
  - url: "http://localhost:8080/v1_1_1"
    description: "本地测试"

paths:
  "/example/person":
    get:
      description: "使用query传参方式的get请求方法"
      parameters:
        - name: param1
          in: query
          required: true
          schema:
            type: string
          description: "参数1,必填"
        - name: param2
          in: query
          description: "参数2, 非必填"
          schema:
            type: string
        - name: date-prop
          in: query
          description: 时间
          schema:
            type: string
            pattern: \d{4}-\d{1,2}-\d{1,2} \d{1,2}:\d{1,2}:\d{1,2}

      responses:
        200:
          description: "请求成功, 业务错误详见看错误码"
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/BaseErrorEntity"
                  - "$ref": "#/components/schemas/PersonInfo"
              examples:
                success:
                  summary: 成功获取的例子
                  value: {name: "example name", age: 11}
                failure:
                  summary: 获取失败的例子
                  value: {errcode: 10001, errMsg: "没有此用户"}
    post:
      description: "使用json传参方式的post请求方法"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - age
              properties:
                age:
                  type: integer
                  format: int32
                name:
                  type: string
            examples:
              success:
                summary: 新增人员
                value: {name: "test", age: 11}

      responses:
        200:
          description: "请求成功, 业务错误详见看错误码"
          content:
            application/json:
              schema:
                  "$ref": "#/components/schemas/BaseErrorEntity"
              examples:
                success:
                  summary: 成功的例子
                  value: {}
                failure:
                  summary: 失败的例子
                  value: {errcode: 10001, errMsg: "系统错误"}

  "/example/person/json":
    get:
      description: "使用json传参方式的get请求方法"
      parameters:
        - name: q
          in: query
          description: json格式的请求内容
          schema:
            "$ref": "#/components/schemas/PersonQuery"
          examples:
            byName:
              summary: 根据姓名查询
              value: {name: "demo"}
      responses:
        200:
          description: "请求成功, 业务错误详见看错误码"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BaseErrorEntity"
              examples:
                success:
                  summary: 成功的例子
                  value: {age: 11, name: "demo"}
                failure:
                  summary: 失败的例子
                  value: {errcode: 10001, errMsg: "系统错误"}

  "/example/person/{id}":
    get:
      description: "使用path传参方式的get请求方法"
      parameters:
        - name: id
          in: path
          description: 人员id
          schema:
            type: integer
            format: int32
          required: true
          examples:
            normal:
              summary: 人员id例子
              value : 1111
      responses:
        200:
          description: "请求成功, 业务错误详见看错误码"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BaseErrorEntity"
              examples:
                success:
                  summary: 成功的例子
                  value: {age: 11, name: "demo"}
                failure:
                  summary: 失败的例子
                  value: {errcode: 10001, errMsg: "系统错误"}

  "/example/person/form":
    post:
      description: "使用form传参方式的post请求方法"
      parameters:
        - name: name
          in: query
          description: 姓名
          schema:
            type: string
          style: form
        - name: age
          in: query
          description: 年龄
          schema:
            type: integer
            format: int32
          style: form

      responses:
        200:
          description: "请求成功, 业务错误详见看错误码"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BaseErrorEntity"
              examples:
                success:
                  summary: 成功的例子
                  value: {}
                failure:
                  summary: 失败的例子
                  value: {errcode: 10001, errMsg: "系统错误"}

  "/example/file":
    post:
      description: "文件上传例子"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                name:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        200:
          description: "请求成功，还得看错误码"
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/BaseErrorEntity"

  "/example/person/put-method":
    put:
      description: "put请求采用query提交"
      parameters:
        - name: param1
          in: query
          required: true
          schema:
            type: integer
            format: int64

      responses:
        200:
          description: "请求成功"

  "/example/person/{personID}":
    delete:
      description: "delete方法， 同时带有授权约束"
      parameters:
        - name: personID
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 111
      security:
        - apiKey: [SessionAuth]

      responses:
        200:
          description: "请求成功"

components:
  securitySchemes:
    SessionAuth:
      description: session方式认证
      type: apiKey
      in: cookie
      name: JSESSIONID

  schemas:
    BaseErrorEntity:
      type: object
      properties:
        errcode:
          type: integer
          format: int32
          description: "属性不存在则代表成功，有则表示错误码"
        errMsg:
          type: string
          description: "中文，人可读的错误信息"

    PersonQuery:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32

    PersonInfo:
      type: object
      required:
        - name
        - age
      properties:
        name:
          type: string
        age:
          type: integer
          format: int32

    ExtendedEntity:
      allOf:
        - "$ref": "#/components/schemas/BaseErrorEntity"
        - type: object
          properties:
            prop1:
              type: string
