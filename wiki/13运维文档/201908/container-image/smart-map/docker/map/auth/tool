(function () {
  IMAP.Tool = IMAP.Class(IMAP.Events, IMAP.DOMEvents, {
    _mapDragable: !1,
    _mapDblclickZoom: !1,
    initialize: function() {
        this._id = "_ld_tool_" + IMAP.Function.createUniqueID();
        IMAP.Events.prototype.initialize.apply(this, []);
        IMAP.DOMEvents.prototype.initialize.apply(this, []);
        this._overlays = {};
        this._opened = !1
    },
    removeById: function(a) {
        this._map && this._overlays[a] && (this._overlayLayer.removeOverlay(this._overlays[a]),
        this._overlays[a] = null)
    },
    clear: function() {
        if (this._map)
            for (var a in this._overlays)
                this._overlayLayer.removeOverlay(this._overlays[a]),
                this._overlays[a] = null
    },
    setMap: function(a) {
        a instanceof IMAP.Map ? (this._map = a,
        this._overlayLayer = a.getOverlayLayer()) : (this._destroy(),
        this._map = this._overlayLayer = null)
    },
    open: function() {
        this._opened = !0
    },
    close: function() {
        this._opened = !1
    },
    _executeOpen: function() {
        var a = this._map;
        if (a) {
            var b = a.cTool;
            b && b._opened ? b._id !== this._id ? this.injectId != b.getId() && (a.cTool = this,
            b.close(0)) : (b.close(),
            a.cTool = null) : a.cTool = this;
            a._toolOpened = !0;
            this._closeMapOper(a);
            this._opened = !0
        }
    },
    _executeClose: function() {
        var a = this
          , b = a._map;
        a._opened = !1;
        a.triggerEvent(IMAP.Constants._REMOVE_TOOL, {
            type: IMAP.Constants._REMOVE_TOOL,
            target: a
        });
        b && (b._toolOpened = !1,
        a._closeEditting(!0),
        b.getOptions(),
        setTimeout(function() {
            a._mapDragable && (b.dragged(!0),
            a._mapDragable = !1);
            a._mapDblclickZoom && (b.dblclickZoom(!0),
            a._mapDblclickZoom = !1)
        }, 5));
        b.cTool = null
    },
    _closeMapOper: function(a) {
        var b = a.getOptions();
        b.dragable && (a.dragged(!1),
        this._mapDragable = !0);
        b.dblclickZoom && (a.dblclickZoom(!1),
        this._mapDblclickZoom = !0)
    },
    _closeEditting: function(a) {},
    getId: function() {
        return this._id
    },
    _destroy: function() {
        this.close();
        this.clearListener()
    },
    _createToolTitle: function(a, b) {
        var c = document.createElement("div");
        c.style.cssText = "background-color: #FFFFFF;border: 1px solid #4B4B4B;border-radius: 3px 3px 3px 3px;box-shadow: 2px 2px 8px #999999;font-size: 12px;line-height: 15px;opacity: 1;padding: 2px 7px;white-space: nowrap;";
        var d = document.createElement("span");
        d.innerHTML = b;
        c.appendChild(d);
        return new IMAP.Label(c,{
            type: IMAP.Constants.OVERLAY_LABEL_HTML,
            position: a,
            offset: {
                x: 10,
                y: 20
            },
            anchor: IMAP.Constants.LEFT_TOP
        })
    },
    getMap: function() {
        return this._map
    }
});
IMAP.MarkerTool = IMAP.Class(IMAP.Tool, {
    _mapMMEvt: null,
    _mapMCEvt: null,
    _mapMCMEvt: null,
    _followMarker: null,
    _followTitle: null,
    initialize: function(a) {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this._icon = a;
        this.follow = !0;
        this.title = "点击左键标记位置，右键退出";
        this.editabled = !1;
        this.autoClose = !0
    },
    open: function() {
        var a = this
          , b = a._map;
        !a._opened && b && (IMAP.Tool.prototype._executeOpen.apply(a, []),
        !a.follow && !a.title || a._mapMMEvt || (a._mapMMEvt = b.addEventListener(IMAP.Constants.MOUSE_MOVE, function(b) {
            var d = b.lnglat;
            a._pixel = b.pixel;
            a.follow && (a._followMarker ? a._followMarker.setPosition(d) : a._createToolMarker(d, !0));
            a.title && (a._followTitle ? a._followTitle.setPosition(d) : (a._followTitle = a._createToolTitle(d, a.title),
            a._overlayLayer.addOverlay(a._followTitle, !1)))
        }, a),
        a._mapMMIEvt = b.addEventListener(IMAP.Constants.MOVING, function(c) {
            a._pixel && (c = b.pixelToLnglat(a._pixel),
            a._followMarker && a._followMarker.setPosition(c),
            a._followTitle && a._followTitle.setPosition(c))
        })),
        a._mapMCEvt || (a._mapMCEvt = b.addEventListener(IMAP.Constants.MOUSE_DOWN, function(c) {
            b && (a._createToolMarker(c.lnglat, !1),
            a.autoClose && (b.editEvt = null,
            a.close()))
        }, a),
        a._mapMCMEvt = b.addEventListener(IMAP.Constants.MOUSE_CONTEXTMENU, a.close, a)))
    },
    close: function() {
        var a = this._map;
        a && (delete this._pixel,
        this._mapMMEvt && (a.removeEventListener(this._mapMMEvt),
        a.removeEventListener(this._mapMMIEvt),
        this._mapMMIEvt = this._mapMMEvt = null),
        this._mapMCEvt && (a.removeEventListener(this._mapMCEvt),
        a.removeEventListener(this._mapMCMEvt),
        this._mapMCEvt = this._mapMCMEvt = null),
        this._followMarker && (this._overlayLayer.removeOverlay(this._followMarker),
        this._followMarker = null),
        this._followTitle && (this._overlayLayer.removeOverlay(this._followTitle),
        this._followTitle = null));
        IMAP.Tool.prototype._executeClose.apply(this)
    },
    editable: function(a) {
        this.editabled = a;
        for (var b in this._overlays)
            this._overlays[b].editable(a)
    },
    _createToolMarker: function(a, b) {
        var c = new IMAP.Marker(a,{
            editabled: this.editabled,
            icon: this._icon,
            markerColor: "blue",
            offset: {
                x: 0,
                y: -10
            }
        });
        this._overlayLayer.addOverlay(c, !1);
        b ? this._followMarker = c : (this._overlays[c.getId()] = c,
        this.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
            type: IMAP.Constants.ADD_OVERLAY,
            target: this,
            overlay: c
        }))
    }
});
IMAP.PolygonTool = IMAP.Class(IMAP.Tool, {
    _mapCMEvt: null,
    _mapDBLEvt: null,
    _mapMMEvt: null,
    _editing: !1,
    _editPolygon: null,
    _tempPolyLine: null,
    _followTitle: null,
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.strokeWeight = 3;
        this.strokeOpacity = 1;
        this.editabled = !1;
        this.strokeColor = "#4169D3";
        this.fillColor = "#99FFCC";
        this.fillOpacity = 0.6;
        this.intersect = !0;
        this.title = "左键双击结束绘制"
    },
    open: function() {
        var a = this._map;
        !this._opened && a && (IMAP.Tool.prototype._executeOpen.apply(this, []),
        this._mapCMEvt || (this._mapCMEvt = a.addEventListener(IMAP.Constants.MOUSE_DOWN, this._mapClickEvt, this)))
    },
    _mapClickEvt: function(a) {
        var b = this
          , c = b._map;
        if (c) {
            if (b._editing) {
                var d = c.pixelToLnglat(b._toCalculatePixel(a.pixel));
                a = b._paths[b._paths.length - 1];
                if (a.lng == d.lng && a.lat == d.lat)
                    return;
                if (!b.intersect && 2 < b._paths.length && !b._isIntersectLngLat(b._paths, d, c)) {
                    alert("多边形不能够相交，请重新选择位置。");
                    return
                }
                b._tempPolyLine && b._tempPolyLine.visible(!1);
                b._paths.push(d);
                b._editPolygon.setPath(b._paths);
                b._tempPaths[2] = d
            } else
                d = a.lnglat,
                b._mouseX = a.pixel.x,
                b._mouseY = a.pixel.y,
                b._editing = !0,
                b._paths = [d],
                b._tempPaths = [d],
                b._editPolygon = b._createToolPolygon([d]),
                b._overlayLayer.addOverlay(b._editPolygon, !1),
                b.title && (b._followTitle = b._createToolTitle(d, IMAP.Function.checkFieldLength(b.title, 40)),
                b._overlayLayer.addOverlay(b._followTitle, !1)),
                a = b._createToolTempPolyline([d]),
                b._tempPolyLine = a,
                b._overlayLayer.addOverlay(a, !1),
                b._mapMMEvt || (b._mapMMEvt = c.addEventListener(IMAP.Constants.MOUSE_MOVE, function(a) {
                    var d = a.lnglat;
                    b._editing && (d = c.pixelToLnglat(b._toCalculatePixel(a.pixel)),
                    b._tempPaths[1] = d,
                    b._tempPolyLine.setPath(b._tempPaths),
                    b._tempPolyLine.visible(!0),
                    b._followTitle && b._followTitle.setPosition(d))
                }, b)),
                b._mapDBLEvt || (b._mapDBLEvt = c.addEventListener(IMAP.Constants.DBLCLICK, function(a) {
                    (a = b._editPolygon) && 2 < a.getPath().length ? (b._editPolygon = null,
                    b._overlays[a.getId()] = a,
                    a.editable(b.editabled),
                    b.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
                        type: IMAP.Constants.ADD_OVERLAY,
                        target: b,
                        overlay: a
                    })) : b.triggerEvent(IMAP.Constants.ERROR, {
                        type: IMAP.Constants.ERROR,
                        target: b
                    });
                    b.autoClose ? b.close() : b._closeEditting()
                }, b));
            b.triggerEvent(IMAP.Constants.ADD_NODE_END, {
                type: IMAP.Constants.ADD_NODE_END,
                target: b,
                lnglat: d
            })
        }
    },
    close: function() {
        var a = this._map;
        a && (this._mapCMEvt && (a.removeEventListener(this._mapCMEvt),
        this._mapCMEvt = null),
        IMAP.Tool.prototype._executeClose.apply(this))
    },
    editable: function(a) {
        this.editabled = a;
        for (var b in this._overlays)
            this._overlays[b].editable(a)
    },
    _closeEditting: function(a) {
        var b = this._map;
        b && (this._followTitle && (this._overlayLayer.removeOverlay(this._followTitle),
        this._followTitle = null),
        a && (this._mapMMEvt && (b.removeEventListener(this._mapMMEvt),
        this._mapMMEvt = null),
        this._mapDBLEvt && (b.removeEventListener(this._mapDBLEvt),
        this._mapDBLEvt = null)));
        this._editPolygon && this._overlayLayer.removeOverlay(this._editPolygon);
        this._editPolygon = null;
        this._tempPolyLine && (this._overlayLayer.removeOverlay(this._tempPolyLine),
        this._tempPolyLine = null);
        this._paths = this._mouseX = this._mouseY = null;
        this._editing = !1
    },
    _toCalculatePixel: function(a) {
        var b = this.strokeWeight;
        a.x = 0 < a.x - this._mouseX ? a.x - b : a.x + b;
        a.y = 0 < a.y - this._mouseY ? a.y - b : a.y + b;
        return a
    },
    _createToolPolygon: function(a) {
        return new IMAP.Polygon(a,{
            editabled: !1,
            strokeColor: this.strokeColor,
            strokeOpacity: this.strokeOpacity,
            strokeWeight: this.strokeWeight,
            fillColor: this.fillColor,
            fillOpacity: this.fillOpacity
        })
    },
    _createToolTempPolyline: function(a) {
        return new IMAP.Polyline(a,{
            editabled: !1,
            strokeColor: "#26F50F",
            strokeOpacity: this.strokeOpacity,
            strokeWeight: this.strokeWeight,
            strokeStyle: "nosolid"
        })
    },
    _isIntersectLngLat: function(a, b, c) {
        var d = c.lnglatToPixel(b);
        b = d.x;
        for (var e = d.y, f = [], g = [], k = 0; k < a.length; k++)
            d = c.lnglatToPixel(a[k]),
            f.push(d.x),
            g.push(d.y);
        a = f.length - 1;
        if (this._isIntersectPixel(f[0], g[0], f[1], g[1], f[a], g[a], b, e))
            return !1;
        for (c = 2; c < a; c++)
            if (this._isIntersectPixel(f[c - 1], g[c - 1], f[c], g[c], f[0], g[0], b, e) || this._isIntersectPixel(f[c - 1], g[c - 1], f[c], g[c], f[a], g[a], b, e))
                return !1;
        return this._isIntersectPixel(f[a - 1], g[a - 1], f[a], g[a], f[0], g[0], b, e) ? !1 : !0
    },
    _isIntersectPixel: function(a, b, c, d, e, f, g, k) {
        var l = 0
          , h = 0
          , h = this._getIntersectPoi;
        return 0 != (d - b) * (g - e) - (k - f) * (c - a) ? (l = e + (g - e) * h(a, b, e, f, c, d) / (h(a, b, e, f, c, d) + h(a, b, c, d, g, k)),
        h = f + (k - f) * h(a, b, e, f, c, d) / (h(a, b, e, f, c, d) + h(a, b, c, d, g, k)),
        0 >= (l - a) * (l - c) && 0 >= (l - e) * (l - g) && 0 >= (h - b) * (h - d) && 0 >= (h - f) * (h - k) ? !0 : !1) : !1
    },
    _getIntersectPoi: function(a, b, c, d, e, f) {
        return (a - e) * (d - f) - (b - f) * (c - e)
    }
});
IMAP.AreaTool = IMAP.Class(IMAP.Tool, {
    _polygonTool: null,
    _path: [],
    _labels: {},
    _tempLabel: null,
    _polygon: null,
    _btnEvts: {},
    _toolAddEvt: null,
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.title = "双击结束测面";
        this.strokeWeight = 3;
        this.strokeOpacity = 1;
        this.strokeColor = "#4169D3";
        this.fillColor = "#99FFCC";
        this.fillOpacity = 0.6
    },
    open: function() {
        var a = this
          , b = a._map;
        if (!a._opened && b) {
            var c = a._polygonTool;
            c || (c = new IMAP.PolygonTool,
            c.intersect = !1,
            c.injectId = a.getId(),
            b.addTool(c),
            a._polygonTool = c);
            IMAP.Tool.prototype._executeOpen.apply(a, []);
            a._toolAddEvt || (a._toolAddEvt = c.addEventListener(IMAP.Constants.ADD_OVERLAY, function(b) {
                a._polygon = b.overlay;
                a.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
                    type: IMAP.Constants.ADD_OVERLAY,
                    target: a,
                    polygonId: a._polygon.getId()
                });
                a.autoClose ? a.close() : a._closeEditting()
            }, a),
            a._toolAddErrorEvt = c.addEventListener(IMAP.Constants.ERROR, function(b) {
                a.autoClose ? a.close() : a._closeEditting()
            }),
            a._toolAddNodeEvt = c.addEventListener(IMAP.Constants.ADD_NODE_END, function(b) {
                var c = a._path;
                c.push(b.lnglat);
                var f = 2 >= c.length ? 0 : IMAP.Function.calculateArea(c);
                2 < c.length && (a._tempLabel ? (a._tempLabel.setPosition(b.lnglat),
                a._tempLabel.setContent(a._getLabelContent(f))) : (a._tempLabel = a._createAreaLabel(b.lnglat, f),
                a._overlayLayer.addOverlay(a._tempLabel)))
            }, a));
            c.strokeWeight = a.strokeWeight;
            c.strokeOpacity = a.strokeOpacity;
            c.strokeColor = a.strokeColor;
            c.fillColor = a.fillColor;
            c.fillOpacity = a.fillOpacity;
            c.autoClose = a.autoClose;
            c.title = a.title;
            c.open()
        }
    },
    close: function() {
        var a = this._polygonTool;
        a && (a.close(),
        this._toolAddEvt && (a.removeEventListener(this._toolAddEvt),
        a.removeEventListener(this._toolAddNodeEvt),
        a.removeEventListener(this._toolAddErrorEvt),
        this._toolAddEvt = this._toolAddErrorEvt = this._toolAddNodeEvt = null),
        IMAP.Tool.prototype._executeClose.apply(this))
    },
    removeById: function(a) {
        this._map && (this._polygonTool && this._polygonTool.removeById(a),
        this._labels[a] && (this._overlayLayer.removeOverlay(this._labels[a]),
        this._labels[a] = null),
        this._btnEvts[a] && (this._btnEvts[a].onclick = null,
        this._btnEvts[a] = null),
        this.triggerEvent(IMAP.Constants.DELETE_END, {
            type: IMAP.Constants.DELETE_END,
            target: this,
            areaId: a
        }))
    },
    clear: function() {
        if (this._map) {
            this._polygonTool && this._polygonTool.clear();
            var a = this._labels, b;
            for (b in a)
                this._overlayLayer.removeOverlay(a[b]);
            this.detachToElement(this._btnEvts);
            this._btnEvts = {};
            this._labels = {}
        }
    },
    _closeEditting: function(a) {
        this._tempLabel && (this._polygon ? (a = this._polygon.getId(),
        this._tempLabel.setContent(this._getLabelContent(IMAP.Function.calculateArea(this._path), a)),
        this._labels[a] = this._tempLabel) : this._overlayLayer.removeOverlay(this._tempLabel),
        this._tempLabel = null);
        this._polygon = null;
        this._path = []
    },
    _destroy: function() {
        this._polygonTool && (this._map.removeTool(this._polygonTool),
        this._polygonTool = null)
    },
    _createAreaLabel: function(a, b) {
        return new IMAP.Label(this._getLabelContent(b, !1),{
            type: IMAP.Constants.OVERLAY_LABEL_HTML,
            position: a,
            offset: {
                x: 0,
                y: -5
            },
            anchor: IMAP.Constants.LEFT_BOTTOM
        })
    },
    _getLabelContent: function(a, b) {
        var c = this
          , d = document.createElement("div");
        d.style.cssText = "background-color: #FFFFFF;border: 1px solid #4B4B4B;border-radius: 3px 3px 3px 3px;box-shadow: 2px 2px 8px #999999;font-size: 12px;line-height: 15px;opacity: 1;padding: 2px 7px;white-space: nowrap;";
        var e = document.createElement("span");
        e.innerHTML = 1 > a ? (1E6 * a).toFixed(2) + "平方米" : a.toFixed(2) + "平方公里";
        d.appendChild(e);
        b && (e = document.createElement("img"),
        e.style.cssText = "margin-left:3px;",
        e.src = IMAP.MapConfig.API_REALM_NAME + IMAP.MapConfig._MAP_CLOSE2_URL,
        c._addBtnEvent(e, function(a) {
            a.stop && IMAP.Event.stop(a);
            c._opened || c.removeById(b)
        }, b),
        d.appendChild(e));
        return d
    },
    _addBtnEvent: function(a, b, c) {
        a = {
            name: IMAP.Constants.CLICK,
            element: a,
            callback: b,
            object: this,
            stop: !0
        };
        this._btnEvts[c] = a;
        this.attachToElement([a])
    }
});
IMAP.CircleTool = IMAP.Class(IMAP.Tool, {
    _editing: !1,
    _editCircle: null,
    _circleToolMMEvt: null,
    _mapCircleToolMDEvt: null,
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.strokeWeight = 3;
        this.strokeOpacity = 1;
        this.strokeColor = "#4169D3";
        this.fillColor = "#99FFCC";
        this.fillOpacity = 0.6;
        this.editabled = !1;
        this.title = "左键双击结束绘制"
    },
    open: function() {
        var a = this._map;
        !this._opened && a && (IMAP.Tool.prototype._executeOpen.apply(this, []),
        a.isCapture = !1,
        this._mapCircleToolMDEvt || (this._mapCircleToolMDEvt = a.addEventListener(IMAP.Constants.MOUSE_DOWN, this._onMapPolygonToolMM, this)),
        a.getOptions().dragable && (a.dragged(!1),
        this._mapDrag = !0))
    },
    close: function() {
        var a = this._map;
        a && (a.isCapture = !0,
        this._mapDrag && (a.dragged(!0),
        this._mapDrag = null),
        this._mapCircleToolMDEvt && (a.removeEventListener(this._mapCircleToolMDEvt),
        this._mapCircleToolMDEvt = null),
        IMAP.Tool.prototype._executeClose.apply(this))
    },
    editable: function(a) {
        this.editabled = a;
        for (var b in this._overlays)
            this._overlays[b].editable(a)
    },
    _onMapPolygonToolMM: function(a) {
        var b = this._map;
        b && !this._editing && (this._circleToolMMEvt || (this._circleToolMMEvt = b.addEventListener(IMAP.Constants.MOUSE_MOVE, this._toEditCircle, this),
        this._circleToolMUEvt = b.addEventListener(IMAP.Constants.MOUSE_UP, this._toConfirmCircle, this)),
        this._editCircle = this._createToolCircle(a.lnglat, 0),
        this._overlayLayer.addOverlay(this._editCircle, !1),
        this._mouseX = a.pixel.x,
        this._mouseY = a.pixel.y,
        this._editing = !0)
    },
    _toEditCircle: function(a) {
        var b = this._map;
        this._editing && b && (a = b.pixelToLnglat(this._toCalculatePixel(a.pixel)),
        a = IMAP.Function.distanceByLngLat(a, this._editCircle.getCenter()),
        this._editCircle.setRadius(a))
    },
    _toCalculatePixel: function(a) {
        var b = this.strokeWeight + 1;
        a.x = 0 < a.x - this._mouseX ? a.x - b : a.x + b;
        a.y = 0 < a.y - this._mouseY ? a.y - b : a.y + b;
        return a
    },
    _toConfirmCircle: function(a) {
        a = this._map;
        var b = this._editCircle;
        this._editing = !1;
        a && b && (this._editCircle = null,
        this._overlays[b.getId()] = b,
        b.editable(this.editabled),
        this.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
            type: IMAP.Constants.ADD_OVERLAY,
            target: this,
            overlay: b
        }),
        this.autoClose ? this.close() : this._closeEditting())
    },
    _closeEditting: function(a) {
        var b = this._map;
        b && a && this._circleToolMMEvt && (b.removeEventListener(this._circleToolMMEvt),
        b.removeEventListener(this._circleToolMUEvt),
        this._circleToolMUEvt = this._circleToolMMEvt = null);
        this._editCircle && this._overlayLayer.removeOverlay(this._editCircle);
        this._mouseY = this._mouseX = this._editCircle = null;
        this._editing = !1
    },
    _createToolCircle: function(a, b) {
        return new IMAP.Circle(a,b,{
            editabled: this.editabled,
            strokeColor: this.strokeColor,
            strokeOpacity: this.strokeOpacity,
            strokeWeight: this.strokeWeight,
            fillColor: this.fillColor,
            fillOpacity: this.fillOpacity
        })
    }
});
IMAP.PolylineTool = IMAP.Class(IMAP.Tool, {
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.strokeWeight = 3;
        this.strokeOpacity = 1;
        this.strokeColor = "#4169D3";
        this.arrow = this.editabled = !1;
        this._cursor = null;
        this.title = "左键双击结束绘制";
        this._mapDBLEvt = this._mapMMEvt = this._mapCEvt = null;
        this._initend = !1
    },
    open: function() {
        var a = this._map;
        a && !this._opened && (IMAP.Tool.prototype._executeOpen.apply(this, []),
        this._initend || (this._initend = !0,
        this._overlays = {},
        delete this._editLine,
        delete this._tempLine,
        delete this._followTitle,
        this._editing = !1),
        this._mapCEvt || (this._mapCEvt = a.addEventListener(IMAP.Constants.MOUSE_DOWN, this._mapClickEvt, this)))
    },
    setCursor: function(a) {
        this._cursor = a
    },
    close: function() {
        var a = this._map;
        a && (this._mapCEvt && (a.removeEventListener(this._mapCEvt),
        delete this._mapCEvt),
        delete this._mapCursor,
        IMAP.Tool.prototype._executeClose.apply(this))
    },
    getPolylineById: function(a) {
        return this._overlays[a]
    },
    getPolylines: function() {
        return this._overlays
    },
    removeById: function(a) {
        this._map && this._overlays[a] && (this._overlayLayer.removeOverlay(this._overlays[a]),
        delete this._overlays[a])
    },
    clear: function() {
        if (this._map)
            for (var a in this._overlays)
                this._overlayLayer.removeOverlay(this._overlays[a]),
                delete this._overlays[a]
    },
    editable: function(a) {
        this.editabled = a;
        for (var b in this._overlays)
            this._overlays[b].editable(a)
    },
    _mapClickEvt: function(a) {
        var b = this
          , c = b._map;
        if (c && a.pixel) {
            if (b._editing) {
                var d = c.pixelToLnglat(b._toCalculatePixel(a.pixel));
                if (b._tempSLngLat.lng == d.lng && b._tempSLngLat.lat == d.lat)
                    return;
                b._tempLine && b._tempLine.visible(!1);
                b._tempSLngLat = d;
                a = b._editLine.getPath();
                a.push(d);
                b._editLine.setPath(a)
            } else
                d = a.lnglat,
                b._tempSLngLat = d,
                b._editing = !0,
                b._mouseX = a.pixel.x,
                b._mouseY = a.pixel.y,
                b._editLine = b._createToolPolyline([d], b.strokeColor),
                b._overlayLayer.addOverlay(b._editLine),
                b.title && (b._followTitle = b._createToolTitle(d, IMAP.Function.checkFieldLength(b.title, 40)),
                b._overlayLayer.addOverlay(b._followTitle)),
                a = b._createToolPolyline([d], "#26F50F"),
                a.addEventListener(IMAP.Constants.CLICK, b._mapClickEvt, b),
                b._tempLine = a,
                b._overlayLayer.addOverlay(a),
                b._mapMMEvt || (b._mapMMEvt = c.addEventListener(IMAP.Constants.MOUSE_MOVE, function(a) {
                    b._editing && (a = c.pixelToLnglat(b._toCalculatePixel(a.pixel)),
                    b._tempLine.setPath([b._tempSLngLat, a]),
                    b._tempLine.visible(!0),
                    b._followTitle && b._followTitle.setPosition(a))
                }, b)),
                b._mapDBLEvt || (b._mapDBLEvt = c.addEventListener(IMAP.Constants.DBLCLICK, function(a) {
                    (a = b._editLine) ? (delete b._editLine,
                    b._overlays[a.getId()] = a,
                    a.editable(b.editabled),
                    b.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
                        type: IMAP.Constants.ADD_OVERLAY,
                        target: b,
                        overlay: a
                    })) : b.triggerEvent(IMAP.Constants.ERROR, {
                        type: IMAP.Constants.ERROR,
                        target: b
                    });
                    b.autoClose ? b.close() : b._closeEditting()
                }, b));
            b.triggerEvent(IMAP.Constants.ADD_NODE_END, {
                type: IMAP.Constants.ADD_NODE_END,
                target: b,
                lineId: b._editLine.getId(),
                lnglat: d
            })
        }
    },
    _closeEditting: function(a) {
        var b = this._map;
        b && (this._followTitle && (this._overlayLayer.removeOverlay(this._followTitle),
        delete this._followTitle),
        a && (this._mapMMEvt && (b.removeEventListener(this._mapMMEvt),
        delete this._mapMMEvt),
        this._mapDBLEvt && (b.removeEventListener(this._mapDBLEvt),
        delete this._mapDBLEvt)),
        this._tempLine && (this._overlayLayer.removeOverlay(this._tempLine),
        delete this._tempLine));
        this._editLine && (this._overlayLayer.removeOverlay(this._editLine),
        delete this._editLine,
        this.triggerEvent(IMAP.Constants.ERROR, {
            type: IMAP.Constants.ERROR,
            target: this
        }));
        delete this._tempSLngLat;
        this._editing = !1
    },
    _toCalculatePixel: function(a) {
        var b = this.strokeWeight;
        a.x = 0 < a.x - this._mouseX ? a.x - b : a.x + b;
        a.y = 0 < a.y - this._mouseY ? a.y - b : a.y + b;
        return a
    },
    _createToolPolyline: function(a, b) {
        b || (b = this.strokeColor);
        return new IMAP.Polyline(a,{
            editabled: !1,
            arrow: this.arrow,
            strokeColor: b,
            strokeOpacity: this.strokeOpacity,
            strokeWeight: this.strokeWeight
        })
    }
});
IMAP.DistanceTool = IMAP.Class(IMAP.Tool, {
    _dragging: !1,
    _btnEvts: {},
    _lineTool: null,
    _toolAddEvt: null,
    _toolAddNodeEvt: null,
    _nodes: {},
    _tips: {},
    _start: !1,
    _editing: !1,
    _moveMonitor: null,
    _tNode: null,
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.strokeWeight = 3;
        this.strokeOpacity = 1;
        this.strokeColor = "#4169D3";
        this.title = "左键双击结束测距"
    },
    open: function() {
        var a = this
          , b = a._map;
        if (b && !a._opened) {
            var c = a._lineTool;
            c || (c = new IMAP.PolylineTool,
            c.injectId = a.getId(),
            a._lineTool = c,
            b.addTool(c));
            var d = []
              , e = -1
              , f = []
              , g = []
              , k = 0;
            a._start = !0;
            c.autoClose = a.autoClose;
            c.strokeWeight = a.strokeWeight;
            c.strokeOpacity = a.strokeOpacity;
            c.strokeColor = a.strokeColor;
            a._toolAddEvt || (a._toolAddEvt = c.addEventListener(IMAP.Constants.ADD_OVERLAY, function(b) {
                if (b.overlay) {
                    b = b.overlay.getId();
                    a._nodes[b] = d;
                    a._tips[b] = f;
                    if (2 > d.length)
                        a.removeById(b);
                    else {
                        var c = f[f.length - 1];
                        c && c.setContent(a._getLabelContent(c._length, !0, b, c._index));
                        a._bindNodesEvt(d);
                        a.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
                            type: IMAP.Constants.ADD_OVERLAY,
                            target: a,
                            lineId: b,
                            length: c._length
                        })
                    }
                    d = [];
                    e = -1;
                    f = [];
                    g = [];
                    k = 0;
                    a.autoClose && a.close()
                }
            }, a),
            a._toolAddErrorEvt = c.addEventListener(IMAP.Constants.ERROR, function(b) {
                if (d) {
                    b = 0;
                    for (var c = d.length; b < c; ++b)
                        a._overlayLayer.removeOverlay(d[b])
                }
                if (f)
                    for (b = 0,
                    c = f.length; b < c; ++b)
                        a._overlayLayer.removeOverlay(f[b]);
                a.autoClose ? a.close() : a._closeEditting()
            }),
            a._toolAddNodeEvt = c.addEventListener(IMAP.Constants.ADD_NODE_END, function(b) {
                var c = b.lnglat;
                b = b.lineId;
                if (c) {
                    var m = g[g.length - 1]
                      , m = m ? IMAP.Function.distanceByLngLat(m, c) / 1E3 : 0;
                    k += m;
                    var n = ++e
                      , q = a._createToolNode(c)
                      , p = a._createDisLabel(c, k, !1, b, n);
                    q._index = n;
                    p._index = n;
                    p._dis = m;
                    p._length = k;
                    q._lineId = b;
                    p._lineId = b;
                    a._overlayLayer.addOverlay(q);
                    a._overlayLayer.addOverlay(p);
                    d.push(q);
                    f.push(p);
                    g.push(c)
                }
                a._start || (d = [],
                e = -1,
                f = [],
                g = [],
                k = 0,
                a._start = !0)
            }, this));
            c.title = a.title;
            c.open();
            a._editing = !0;
            a._moveMonitor && (b.removeEventListener(a._moveMonitor),
            a._moveMonitor = null)
        }
    },
    close: function() {
        var a = this._lineTool;
        a && (this._bindMapEvt(this._map),
        a.close(),
        this._toolAddEvt && (a.removeEventListener(this._toolAddEvt),
        a.removeEventListener(this._toolAddNodeEvt),
        this._toolAddEvt = this._toolAddNodeEvt = null),
        IMAP.Tool.prototype._executeClose.apply(this));
        this._editing = !1
    },
    removeById: function(a) {
        this._map && (this._lineTool && this._lineTool.removeById(a),
        this._removeNodesById(a),
        this.triggerEvent && this.triggerEvent(IMAP.Constants.DELETE_END, {
            type: IMAP.Constants.DELETE_END,
            target: this,
            lineId: a
        }))
    },
    clear: function() {
        if (this._map) {
            this._lineTool && this._lineTool.clear();
            for (var a in this._nodes)
                this._removeNodesById(a);
            this.detachToElement(this._btnEvts);
            this._btnEvts = {};
            this._start = !1
        }
    },
    _destroy: function() {
        this._moveMonitor && (this._map.removeEventListener(this._moveMonitor),
        this._moveMonitor = null);
        IMAP.Tool.prototype._executeClose.apply(this)
    },
    _closeEditting: function(a) {
        this._removeTempNode()
    },
    _bindMapEvt: function(a) {},
    _removeTempNode: function() {
        this._tNode && (this._overlayLayer.removeOverlay(this._tNode),
        this._tNode = null)
    },
    _createMoveNode: function(a, b, c, d) {
        var e = this
          , f = e._tNode;
        f ? f.setCenter(b) : (f = e._createToolNode(b, !0),
        f.ep = !0,
        e._tNode = f,
        e._nodeDown = f.addEventListener(IMAP.Constants.MOUSE_DOWN, function(b) {
            e._editing = !0;
            if (!f.stop) {
                f.stop = !0;
                f.virtual = !1;
                f.setAttribute({
                    strokeOpacity: 1
                });
                f.removeEventListener(e._nodeDown);
                e._nodeDown = null;
                e._tNode = null;
                var c = a.getPath();
                b = a.getId();
                f._lineId = b;
                c.splice(d, 0, f.getCenter());
                a.setPath(c);
                c = e._nodes[b];
                c.splice(d, 0, f);
                for (var l = d, h = c.length; l < h; ++l)
                    c[l]._index = l;
                e._nodes[b] = c;
                var c = e._tips[b]
                  , h = c[d - 1]
                  , l = c[d]
                  , m = IMAP.Function.distanceByLngLat(h.getPosition(), f.getCenter()) / 1E3
                  , n = h._length + m
                  , h = e._createDisLabel(f.getCenter(), n, !1, b, d);
                h._length = n;
                h._dis = m;
                h._lineId = b;
                e._overlayLayer.addOverlay(h);
                m = IMAP.Function.distanceByLngLat(f.getCenter(), l.getPosition()) / 1E3;
                l._dis = m;
                c.splice(d, 0, h);
                e._tips[b] = c;
                b = d;
                for (m = c.length; b < m - 1; ++b)
                    h = c[b],
                    h._index = b,
                    l = c[b + 1],
                    l._length = l._dis + h._length;
                e._bindNodeEvt(f);
                e._editing = !1
            }
        }, e),
        e._overlayLayer.addOverlay(f))
    },
    _bindNodesEvt: function(a) {
        if (a)
            for (var b = 0, c = a.length; b < c; ++b)
                this._bindNodeEvt(a[b])
    },
    _bindNodeEvt: function(a) {
        var b = this;
        a.ep = !1;
        a.stop = !1;
        a.addEventListener(IMAP.Constants.DRAG_ING, function(c) {
            b._editing = !0;
            c = a._lineId;
            var d = b._tips[c];
            if (d) {
                var e = d.length, f = a._index, g, k = d[f];
                g = b._lineTool.getPolylineById(c);
                var l = a.getCenter();
                k.setPosition(l);
                var h = g.getPath();
                h[f] = l;
                g.setPath(h);
                if (h = d[f - 1])
                    g = h ? IMAP.Function.distanceByLngLat(h.getPosition(), l) / 1E3 : 0,
                    k._dis = g,
                    k._length = g + h._length;
                if (h = d[f + 1]) {
                    g = IMAP.Function.distanceByLngLat(l, h.getPosition()) / 1E3;
                    h._dis = g;
                    for (h._length = h._dis + k._length; f < e - 1; ++f)
                        k = d[f],
                        h = d[f + 1],
                        h._length = h._dis + k._length,
                        k.setContent(b._getLabelContent(k._length, !1, c, f));
                    d[e - 1].setContent(b._getLabelContent(d[e - 1]._length, !0, c, e - 1))
                } else
                    k.setContent(b._getLabelContent(k._length, !0, c, k._index))
            }
        }, b);
        a.addEventListener(IMAP.Constants.DRAG_END, function(a) {
            b._editing = !1
        });
        a.addEventListener(IMAP.Constants.MOUSE_UP, function(a) {
            b._editing = !1
        });
        a.addEventListener(IMAP.Constants.CLICK, function(a) {
            b._editing = !1
        })
    },
    _removeNodesById: function(a) {
        var b = this._overlayLayer
          , c = this._nodes[a];
        if (c) {
            for (var d = 0, e = c.length; d < e; ++d)
                b.removeOverlay(c[d]);
            this._nodes[a] = null
        }
        d = this._tips[a];
        if (c) {
            c = 0;
            for (e = d.length; c < e; ++c)
                b.removeOverlay(d[c]);
            this._tips[a] = null
        }
        this._btnEvts[a] && (this.detachToElement([this._btnEvts[a]]),
        this.mapMouseDown = null,
        this._btnEvts[a] = null)
    },
    _createDisLabel: function(a, b, c, d, e) {
        a = new IMAP.Label(this._getLabelContent(b, c, d, e),{
            type: IMAP.Constants.OVERLAY_LABEL_HTML,
            position: a,
            offset: {
                x: 5,
                y: -10
            },
            anchor: IMAP.Constants.LEFT_BOTTOM
        });
        a.stop = !1;
        return a
    },
    _getLabelContent: function(a, b, c, d) {
        var e = this
          , f = document.createElement("div");
        f.style.cssText = "background-color: #FFFFFF;border: 1px solid #4B4B4B;border-radius: 3px 3px 3px 3px;box-shadow: 2px 2px 8px #999999;font-size: 12px;line-height: 15px;opacity: 1;padding: 2px 7px;white-space: nowrap;";
        var g = document.createElement("span");
        g.innerHTML = 0 == a ? "起点" : 1 < a ? a.toFixed(2) + "公里" : (1E3 * a).toFixed(2) + "米";
        f.appendChild(g);
        a = document.createElement("img");
        a.style.cssText = "margin-left:3px;font-size:12px;cursor:pointer;";
        a.src = IMAP.MapConfig.API_REALM_NAME + IMAP.MapConfig._MAP_CLOSE1_URL;
        e._addBtnEvent(a, function(a) {
            e._opened || (e._removeNode(c, d),
            e._removeTempNode())
        }, c);
        f.appendChild(a);
        b && (b = document.createElement("img"),
        b.style.cssText = "margin-left:3px;cursor:pointer;",
        b.src = IMAP.MapConfig.API_REALM_NAME + IMAP.MapConfig._MAP_CLOSE2_URL,
        e._addBtnEvent(b, function(a) {
            e._opened || e.removeById(c)
        }, c),
        f.appendChild(b));
        return f
    },
    _removeNode: function(a, b) {
        var c = this._nodes[a]
          , d = this._tips[a]
          , e = this._lineTool.getPolylineById(a);
        if (c && d && e)
            if (2 == c.length)
                this.removeById(a);
            else {
                var f = e.getPath();
                f.splice(b, 1);
                e.setPath(f);
                this._overlayLayer.removeOverlay(c[b]);
                this._overlayLayer.removeOverlay(d[b]);
                c.splice(b, 1);
                d.splice(b, 1);
                for (var e = c.length, f = d[b], g = d[b - 1], k = f ? b : b - 1, l = k; l < e; ++l)
                    c[l]._index = l;
                f && (c = g ? IMAP.Function.distanceByLngLat(g.getPosition(), f.getPosition()) / 1E3 : 0,
                f._dis = c,
                f._length = g ? g._length + c : 0);
                for (g = k; g < e - 1; ++g)
                    f = d[g],
                    f._index = g,
                    c = d[g + 1],
                    c._length = c._dis + f._length,
                    f.setContent(this._getLabelContent(f._length, !1, a, g));
                d[e - 1].setContent(this._getLabelContent(d[e - 1]._length, !0, a, e - 1))
            }
    },
    _addBtnEvent: function(a, b, c) {
        a = {
            name: IMAP.Constants.CLICK,
            element: a,
            callback: b,
            object: this,
            stop: !0
        };
        this._btnEvts[c] = a;
        this.attachToElement([a])
    },
    _createToolNode: function(a, b) {
        var c = new IMAP.Circle(a,6,{
            editabled: !1,
            strokeColor: "#000000",
            strokeWeight: 2,
            strokeOpacity: b ? 0.6 : 1,
            fillOpacity: 1,
            fillColor: "#ffffff"
        });
        c.visibleEditNode(!1);
        c.zIndex = 150;
        c.setUnits("pixel");
        return c
    }
});
IMAP.RectangleTool = IMAP.Class(IMAP.Tool, {
    _editing: !1,
    _editRect: null,
    _rectToolMMEvt: null,
    _mapRectToolMDEvt: null,
    initialize: function() {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.strokeWeight = 2;
        this.strokeOpacity = 1;
        this.strokeColor = "#4169D3";
        this.fillColor = "#99FFCC";
        this.fillOpacity = 0.6;
        this.editabled = !1
    },
    setCursor: function(a) {},
    open: function(a) {
        a = this._map;
        !this._opened && a && (IMAP.Tool.prototype._executeOpen.apply(this, []),
        a.isCapture = !1,
        this._mapRectToolMDEvt || (this._mapRectToolMDEvt = a.addEventListener(IMAP.Constants.MOUSE_DOWN, this._onMapRectToolMM, this)),
        a.getOptions().dragable && (a.dragged(!1),
        this._mapDrag = !0))
    },
    close: function() {
        var a = this._map;
        a && (this._mapDrag && (a.dragged(!0),
        delete this._mapDrag),
        a.isCapture = !0,
        this._mapRectToolMDEvt && (a.removeEventListener(this._mapRectToolMDEvt),
        this._mapRectToolMDEvt = null),
        this._executeClose.apply(this))
    },
    editable: function(a) {
        this.editabled = a;
        for (var b in this._overlays)
            this._overlays[b].editable(a)
    },
    _onMapRectToolMM: function(a) {
        var b = this._map;
        b && !this._editing && (this._rectToolMMEvt || (this._rectToolMMEvt = b.addEventListener(IMAP.Constants.MOUSE_MOVE, this._toEditRect, this),
        this._rectToolMUEvt = b.addEventListener(IMAP.Constants.MOUSE_UP, this._toConfirmRect, this)),
        this._startLnglat = a.lnglat,
        this._editRect = this._createToolRectangle(new IMAP.LngLatBounds(this._startLnglat,this._startLnglat)),
        this._overlayLayer.addOverlay(this._editRect),
        this._editing = !0)
    },
    _toEditRect: function(a) {
        var b = this._map;
        this._editing && b && (b = a.lnglat,
        a = new IMAP.LngLat(Math.min(b.lng, this._startLnglat.lng),Math.min(b.lat, this._startLnglat.lat)),
        b = new IMAP.LngLat(Math.max(b.lng, this._startLnglat.lng),Math.max(b.lat, this._startLnglat.lat)),
        this._editRect.setBounds(new IMAP.LngLatBounds(a,b)))
    },
    _toConfirmRect: function(a) {
        if (this._map) {
            if (a = this._editRect)
                this._editRect = null,
                this._overlays[a.getId()] = a,
                a.editable(this.editabled),
                this.triggerEvent(IMAP.Constants.ADD_OVERLAY, {
                    type: IMAP.Constants.ADD_OVERLAY,
                    target: this,
                    overlay: a
                });
            this.autoClose ? this.close() : this._closeEditting()
        }
    },
    _closeEditting: function(a) {
        var b = this._map;
        b && a && this._rectToolMMEvt && (b.removeEventListener(this._rectToolMMEvt),
        b.removeEventListener(this._rectToolMUEvt),
        this._rectToolMUEvt = this._rectToolMMEvt = null);
        this._editRect && (this._overlayLayer.removeOverlay(this._editRect),
        this._editRect = null);
        this._startLnglat = null;
        this._editing = !1
    },
    _createToolRectangle: function(a) {
        return new IMAP.Rectangle(a,{
            editabled: this.editabled,
            strokeColor: this.strokeColor,
            strokeOpacity: this.strokeOpacity,
            strokeWeight: this.strokeWeight,
            fillColor: this.fillColor,
            fillOpacity: this.fillOpacity
        })
    },
    _executeClose: function() {
        var a = this._map;
        this._opened = !1;
        this.triggerEvent(IMAP.Constants._REMOVE_TOOL, {
            type: IMAP.Constants._REMOVE_TOOL,
            target: this
        });
        a && (a._toolOpened = !1,
        this._closeEditting(!0),
        a.getOptions(),
        this._mapDragable && (a.dragged(!0),
        this._mapDragable = !1),
        this._mapDblclickZoom && (a.dblclickZoom(!0),
        this._mapDblclickZoom = !1));
        a.cTool = null
    }
});
IMAP.ZoomTool = IMAP.Class(IMAP.Tool, {
    _rectTool: null,
    _zoomToolAddEvt: null,
    initialize: function(a) {
        IMAP.Tool.prototype.initialize.apply(this, []);
        this.autoClose = !0;
        this.zoomType = a || IMAP.Constants.TOOL_ZOOM_IN
    },
    open: function() {
        var a = this
          , b = a._map;
        if (b && !a._opened) {
            var c = a._rectTool;
            c || (c = new IMAP.RectangleTool,
            c.injectId = a.getId(),
            b.addTool(c),
            a._rectTool = c);
            a._zoomToolAddEvt || (a._zoomToolAddEvt = c.addEventListener(IMAP.Constants.ADD_OVERLAY, function(d) {
                if ((d = d.overlay) && b) {
                    var e = d.getBounds()
                      , f = b.getSize()
                      , g = new IMAP.LngLat(Math.min(e.southwest.lng, e.northeast.lng),Math.min(e.southwest.lat, e.northeast.lat))
                      , k = new IMAP.LngLat(Math.max(e.southwest.lng, e.northeast.lng),Math.max(e.southwest.lat, e.northeast.lat))
                      , g = b.lnglatToPixel(g)
                      , k = b.lnglatToPixel(k)
                      , l = e.getCenter()
                      , f = Math.min(f.width / Math.abs(k.x - g.x), f.height / Math.abs(k.y - g.y));
                    isNaN(f) || (a.zoomType == IMAP.Constants.TOOL_ZOOM_IN ? b.setBounds(e) : a.zoomType == IMAP.Constants.TOOL_ZOOM_OUT && (e = Math.round(b.getZoom() + Math.log(1 / f) / Math.log(2)),
                    e > b.getZoom() ? e = b.getZoom() : e == b.getZoom() && e--,
                    e < b.getOptions().minZoom && (e = b.getOptions().minZoom),
                    b.getOptions().center = l,
                    b.setZoom(e)));
                    c.removeById(d.getId())
                }
                a.autoClose && a.close()
            }, a));
            c.autoClose = a.autoClose;
            c.open()
        }
    },
    close: function() {
        var a = this._rectTool;
        a && (a.close(),
        this._zoomToolAddEvt && (a.removeEventListener(this._zoomToolAddEvt),
        this._zoomToolAddEvt = null))
    },
    _destroy: function() {
        this._rectTool && (this._map.removeTool(this._rectTool),
        this._rectTool = null)
    }
});
IMAP.DataClusterOptions = IMAP.Class({initialize: function() {
    this.gridSize = 60;
    this.minimumClusterSize = 2;
    this.maxZoom = 0;
    this.styles = [];
    this.zoomOnClick = !0
}});
IMAP.DataClusterStyle = IMAP.Class({initialize: function() {
    this.url = "";
    this.width = this.height = 35;
    this.anchor = [25, 0];
    this.textColor = "black";
    this.textSize = 11;
    this.maxSize = 10;
    this.textDecoration = "none";
    this.fontWeight = "bold";
    this.fontStyle = "normal";
    this.fontFamily = "Arial,sans-serif";
    this.backgroundPosition = "0,0"
}});
IMAP.ClusterIcon = IMAP.Class(IMAP.DOMEvents, {initialize: function(a, b) {
    this.cluster_ = a;
    this.styles_ = b;
    this.sums_ = this.div_ = this.center_ = null;
    this.visible_ = !1;
    this._map = null;
    IMAP.DOMEvents.prototype.initialize.apply(this, []);
    this.setMap(a.getMap())
},setStyles: function(a) {
    this.styles_ = a
},setMap: function(a) {
    null == a ? (this.onRemove_(), this._map = null) : (this._map = a, this.onAdd_())
},getMap: function() {
    return this._map
},show: function() {
    if (this.div_) {
        var a = this._getPosFromLatLng(this.center_);
        this.div_.style.cssText = this._createCss(a);
        this.div_.innerHTML = this.cluster_.printable_ ? '<img src="' + this.url_ + '"><div style="position: absolute; top: 0px; left: 0px; width: ' + this._width_ + 'px;">' + this.sums_.text + "</div>" : this.sums_.text;
        this.div_.title = this.cluster_.getDataCluster().getTitle();
        this.div_.style.display = ""
    }
    this.visible_ = !0
},hide: function() {
    this.div_ && (this.div_.style.display = "none");
    this.visible_ = !1
},useStyle: function(a) {
    this.sums_ = a;
    a = Math.max(0, a.index - 1);
    a = Math.min(this.styles_.length - 1, a);
    a = this.styles_[a];
    this.url_ = a.url;
    this.height_ = a.height;
    this.width_ = a.width;
    this.anchor_ = a.anchor;
    this.anchorIcon_ = a.anchorIcon || [parseInt(this.height_ / 2, 10), parseInt(this.width_ / 2, 10)];
    this.textColor_ = a.textColor || "black";
    this.textSize_ = a.textSize || 11;
    this.textDecoration_ = a.textDecoration || "none";
    this.fontWeight_ = a.fontWeight || "bold";
    this.fontStyle_ = a.fontStyle || "normal";
    this.fontFamily_ = a.fontFamily || "Arial,sans-serif";
    this.backgroundPosition_ = a.backgroundPosition || "0 0"
},setCenter: function(a) {
    this.center_ = a
},_draw: function() {
    if (this.visible_) {
        var a = this.getPosFromLatLng_(this.center_);
        this.div_.style.top = a[1] + "px";
        this.div_.style.left = a[0] + "px"
    }
},_createCss: function(a) {
    var b = [];
    this.cluster_.printable_ || (b.push("background-image:url(" + this.url_ + ");"), b.push("background-position:" + this.backgroundPosition_ + ";"), b.push("background-repeat:no-repeat;"));
    "object" === typeof this.anchor_ ? ("number" === typeof this.anchor_[0] && 0 < this.anchor_[0] && this.anchor_[0] < this.height_ ? b.push("height:" + this.height_ + "px; padding-top:" + this.anchor_[0] + "px;") : b.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px;"), "number" === typeof this.anchor_[1] && 0 < this.anchor_[1] && this.anchor_[1] < this.width_ ? b.push("width:" + (this.width_ - this.anchor_[1]) + "px; padding-left:" + this.anchor_[1] + "px;") : b.push("width:" + this.width_ + "px; text-align:center;")) : b.push("height:" + this.height_ + "px; line-height:" + this.height_ + "px; width:" + this.width_ + "px; text-align:center;");
    b.push("cursor:pointer; top:" + a.y + "px; left:" + a.x + "px; color:" + this.textColor_ + "; position:absolute; font-size:" + this.textSize_ + "px; font-family:" + this.fontFamily_ + "; font-weight:" + this.fontWeight_ + "; font-style:" + this.fontStyle_ + "; text-decoration:" + this.textDecoration_ + ";");
    return b.join("")
},onAdd_: function() {
    var a = this;
    if (!a.div) {
        a.div_ = IMAP.Function.createElement({name: "div"});
        a.visible_ && a.show();
        var b = a._map, c = IMAP.Constants;
        a.attachToElement([{name: c.CLICK,element: a.div_,callback: function() {
                    var d = a.cluster_;
                    d.getMarkers();
                    a._triggerEventListener(a, c.CLICK);
                    d.getDataCluster().getZoomOnClick() && b.zoomIn(null, !0)
                },object: a}, {name: c.MOUSE_OUT,element: a.div_,callback: function(b) {
                    a._triggerEventListener(a, c.MOUSE_OUT)
                },object: a}, {name: c.MOUSE_OVER,element: a.div_,callback: function(b) {
                    a._triggerEventListener(a, c.MOUSE_OVER)
                },object: a}]);
        a._map.getOverlayLayer().getElement().overlayPane.appendChild(a.div_)
    }
},_triggerEventListener: function(a, b) {
    var c = a.cluster_;
    c.getDataCluster().triggerEvent(b, c.getCenter(), c.getMarkers())
},onRemove_: function() {
    this.div_ && this.div_.parentNode && (this.hide(), this.detachToElement([{name: IMAP.Constants.CLICK,element: this.div_}, {name: IMAP.Constants.MOUSE_OUT,element: this.div_}, {name: IMAP.Constants.MOUSE_OVER,element: this.div_}]), this.div_.parentNode.removeChild(this.div_), this.div_ = null, delete this.div_)
},_getPosFromLatLng: function(a) {
    a = this._map.lnglatToLayerPixel(a);
    a.x -= this.anchorIcon_[1];
    a.y -= this.anchorIcon_[0];
    return a
}});
IMAP.Cluster = IMAP.Class({initialize: function(a) {
    this.dataCluster_ = a;
    this.map_ = a.getMap();
    this.gridSize_ = a.getGridSize();
    this.minimumClusterSize_ = a.getMinimumClusterSize();
    this.averageCenter_ = a.getAverageCenter();
    this.printable_ = a.getPrintable();
    this.markers_ = [];
    this.bounds_ = this.center_ = null;
    this.clusterIcon_ = new IMAP.ClusterIcon(this, a.getStyles())
},setStyles: function(a) {
    this.clusterIcon_.setStyles(a);
    this.updateIcon()
},getClusterIcon: function() {
    return self.clusterIcon_
},getSize: function() {
    return this.markers_.length
},getMarkers: function() {
    return this.markers_
},getCenter: function() {
    return this.center_
},getMap: function() {
    return this.map_
},getDataCluster: function() {
    return this.dataCluster_
},getBounds: function() {
    var a, b = new IMAP.LngLatBounds(new IMAP.LngLat(this.center_.lng, this.center_.lat), new IMAP.LngLat(this.center_.lng, this.center_.lat)), c = this.getMarkers();
    for (a = 0; a < c.length; a++)
        b.extend(c[a].getPosition());
    return b
},remove: function() {
    this.clusterIcon_.setMap(null);
    this.markers_ = []
},addMarker: function(a) {
    if (this.isMarkerAlreadyAdded_(a))
        return !1;
    if (!this.center_)
        this.center_ = a.getPosition(), this.calculateBounds_();
    else if (this.averageCenter_) {
        var b = this.markers_.length + 1, c = (this.center_.lat * (b - 1) + a.getPosition().lat) / b, b = (this.center_.lng * (b - 1) + a.getPosition().lng) / b;
        this.center_ = new IMAP.LngLat(b, c);
        this.calculateBounds_()
    }
    a.isAdded = !0;
    a.cluster = this;
    this.markers_.push(a);
    return !0
},isMarkerInClusterBounds: function(a) {
    return this.bounds_.containsLngLat(a.getPosition())
},addMarkerToMap: function() {
    for (var a = this.markers_.length, b = this.getMap().getOverlayLayer(), c, d = 0; d < a; d++)
        c = this.markers_[d], b.addOverlay(c), this._addMarkerEvts(c)
},_addMarkerEvts: function(a) {
    var b = this, c = IMAP.Constants;
    a.addEventListener(c.CLICK, function() {
        b.dataCluster_.triggerEvent(c.CLICK, b.center_, [a])
    }, b);
    a.addEventListener(c.MOUSE_OUT, function() {
        b.dataCluster_.triggerEvent(c.MOUSE_OUT, b.center_, [a])
    }, b);
    a.addEventListener(c.MOUSE_OVER, function() {
        b.dataCluster_.triggerEvent(c.MOUSE_OVER, b.center_, [a])
    }, b)
},removeMarker: function() {
    for (var a = this.markers_.length, b = this.getMap().getOverlayLayer(), c = 0; c < a; c++)
        this.markers_[c].getMap() && b.removeOverlay(this.markers_[c])
},updateIcon: function() {
    var a = this.markers_.length, b = this.dataCluster_.getMaxZoom();
    null !== b && this.map_.getZoom() < b || a < this.minimumClusterSize_ ? (this.clusterIcon_.hide(), this.addMarkerToMap()) : (this.removeMarker(), this.dataCluster_.getStyles(), a = this.dataCluster_.getCalculator()(this.markers_, this.dataCluster_.getStyles(), this.dataCluster_), this.clusterIcon_.setCenter(this.center_), this.clusterIcon_.useStyle(a), this.clusterIcon_.show())
},calculateBounds_: function() {
    var a = this.center_, a = new IMAP.LngLatBounds(new IMAP.LngLat(a.lng, a.lat), new IMAP.LngLat(a.lng, a.lat));
    this.bounds_ = this.dataCluster_.getExtendedBounds(a)
},isMarkerAlreadyAdded_: function(a) {
    var b = this.markers_;
    if (b.indexOf)
        return -1 !== b.indexOf(a);
    for (var c = 0, d = b.length; c < d; ++c)
        if (a === b[c])
            return !0;
    return !1
}});
IMAP.DataCluster = IMAP.Class(IMAP.Events, {initialize: function(a, b, c) {
    c = c || {};
    var d = {gridSize: "number" === typeof c.gridSize && 10 <= c.gridSize ? c.gridSize : 60,minimumClusterSize: c.minimumClusterSize || 2,maxZoom: c.maxZoom || 0,title: c.title || "",zoomOnClick: typeof ("boolean" == c.zoomOnClick) ? c.zoomOnClick : !0,averageCenter: !0,printable: c.printable || !1,batchSize: c.batchSize || 1E3};
    c.styles ? d.styles = c.styles : (c = IMAP.MapConfig.API_REALM_NAME + IMAP.MapConfig._MAP_CLUSTER_ICON, d.styles = [{url: c + "1_1.png",height: 75,width: 75,anchor: [30, 0],textColor: "black",textSize: 10,maxSize: 1E3}, {url: c + "1_2.png",height: 75,width: 65,anchor: [25, 0],textColor: "black",textSize: 10,maxSize: 500}, {url: c + "1_3.png",height: 55,width: 55,anchor: [20, 0],textColor: "black",textSize: 10,maxSize: 100}, {url: c + "1_4.png",height: 45,width: 45,anchor: [15, 0],textColor: "black",textSize: 10,maxSize: 50}, {url: c + "1_5.png",height: 35,width: 35,anchor: [10, 0],textColor: "black",textSize: 10,maxSize: 10}]);
    IMAP.Events.prototype.initialize.apply(this, []);
    this._options = d;
    this.markers_ = [];
    this.clusters_ = [];
    this.clusterListeners_ = [];
    this.activeMap_ = a;
    this._initConfig(b || [], a)
},getOptions: function() {
    return this._options
},getClusters: function() {
    return this.clusters_
},getMarkers: function() {
    return this.markers_
},refreshCluster: function() {
    this.repaint_(!0)
},setZoomOnClick: function(a) {
    "boolean" == typeof a && (this._options.zoomOnClick = a)
},getZoomOnClick: function() {
    return this._options.zoomOnClick
},setAverageCenter: function(a, b) {
    "boolean" == typeof a && (this._options.averageCenter = a, b && this.repaint_(!0))
},getAverageCenter: function() {
    return this._options.averageCenter
},getStyles: function() {
    return this._options.styles
},setStyles: function(a) {
    if (a instanceof Array) {
        var b = this.clusters_;
        this._options.styles = a;
        for (var c = 0, d = b.length; c < d; ++c)
            b[c].setStyles(a)
    }
},getMaxZoom: function() {
    return this._options.maxZoom
},setMaxZoom: function(a, b) {
    "number" == typeof a && (this._options.maxZoom = a, b && this.repaint_(!0))
},getMinimumClusterSize: function() {
    return this._options.minimumClusterSize
},setMinimumClusterSize: function(a, b) {
    "number" == typeof a && (this._options.minimumClusterSize = a, b && this.repaint_(!0))
},setGridSize: function(a, b) {
    typeof ("number" === a) && 10 <= a && (this._options.gridSize = a, b && this.repaint_(!0))
},getMap: function() {
    return this.activeMap_
},getTitle: function() {
    return this._options.title
},getGridSize: function() {
    return this._options.gridSize
},clearMarkers: function() {
    this.resetViewport_(!0);
    this.markers_ = []
},removeMarker: function(a, b) {
    var c = -1, d = this.markers_;
    b = "undefined" == typeof b ? !0 : b;
    var e = !0;
    if (d.indexOf)
        c = d.indexOf(a);
    else
        for (var f = 0, h = d.length; f < h; ++f)
            if (a === d[f]) {
                c = f;
                break
            }
    -1 === c ? e = !1 : (a.getMap() && this.activeMap_.getOverlayLayer().removeOverlay(a), d.splice(c, 1));
    b && e && this.repaint_();
    return e
},addMarker: function(a, b) {
    b = "undefined" == typeof b ? !0 : b;
    a.isAdded = !1;
    this.markers_.push(a);
    b && this.redraw_()
},addMarkers: function(a, b) {
    var c = this.markers_, d;
    b = "undefined" == typeof b ? !0 : b;
    for (var e = 0, f = a.length; e < f; ++e)
        d = a[e], d.isAdded = !1, c.push(d);
    b && this.redraw_()
},setMap: function(a) {
    a ? (this.activeMap_ = a, this.onAdd_()) : (this.onRemove_(), this.clusterListeners_ = [], this.clusters_ = [], this.markers_ = [], this.activeMap_ = null)
},getExtendedBounds: function(a) {
    var b = this.activeMap_, c = this._options.gridSize, d = b.lnglatToPixel(a.southwest);
    a = b.lnglatToPixel(a.northeast);
    d.x -= c;
    d.y += c;
    a.x += c;
    a.y -= c;
    return new IMAP.LngLatBounds(b.pixelToLnglat(d), b.pixelToLnglat(a))
},removeCluster_: function() {
    for (var a = this.clusters_, b = 0, c = a.length; b < c; ++b)
        a[b].remove();
    this.clusters_ = []
},_initConfig: function(a, b) {
    var c = this.getOptions();
    c.calculator = c.calculator || this.calculator_;
    this.listeners_ = [];
    this.addMarkers(a, !0);
    this.ready_ = !0;
    this.setMap(b)
},getPrintable: function() {
    return this.getOptions().printable
},getCalculator: function() {
    return this.getOptions().calculator
},triggerEvent: function(a, b, c) {
    if (a = this.getListeners()[a])
        for (var d = 0, e = a.length; d < e; ++d)
            a[d].func.apply(a[d].obj, [b, c])
},resetViewport_: function(a) {
    var b, c = this.getMarkers(), d = this.getMap().getOverlayLayer();
    this.removeCluster_();
    for (var e = 0, f = c.length; e < f; ++e)
        b = c[e], a && b.getMap() && d.removeOverlay(b), b.isAdded = !1
},repaint_: function(a) {
    this.resetViewport_(a);
    this.redraw_()
},redraw_: function() {
    this.bounds = this.getExtendedBounds(this.getMap().getBounds());
    this.createClusters_(0);
    this.reSetPos_()
},createClusters_: function(a) {
    if (this.ready_) {
        for (var b = this.getMarkers(), c = Math.min(a + this.getOptions().batchSize, b.length), d = a; d < c; ++d)
            a = b[d], !a.isAdded && this.bounds.containsLngLat(a.getPosition()) && this.addToClosestCluster_(a);
        c < b.length && this.createClusters_(c)
    }
},addToClosestCluster_: function(a) {
    for (var b, c, d = 4E5, e = null, f = this.getClusters(), h = 0, k = f.length; h < k; ++h)
        if (c = f[h], b = c.getCenter())
            b = IMAP.Function.distanceByLngLat(b, a.getPosition()), 0 == h && (d = b + 1), b < d && (d = b, e = c);
    e && e.isMarkerInClusterBounds(a) ? e.addMarker(a) : (c = new IMAP.Cluster(this), c.addMarker(a), f.push(c))
},reSetPos_: function() {
    for (var a = this.getClusters(), b = 0, c = a.length; b < c; b++)
        a[b].updateIcon()
},onAdd_: function() {
    var a = this, b = a.getMap();
    a.ready_ = !0;
    a.repaint_();
    a.listeners_ = [b.addEventListener(IMAP.Constants.ZOOM_END, function(b) {
            a.repaint_(!0)
        }, a), b.addEventListener(IMAP.Constants.MOVE_END, function(b) {
            a.redraw_()
        }, a)]
},onRemove_: function() {
    var a = this.getMap(), b = this.listeners_;
    this.resetViewport_(!0);
    for (var c = 0, d = b.length; c < d; ++c)
        a.removeEventListener(b[c]);
    this.ready_ = !1
},calculator_: function(a, b, c) {
    for (var d = 1, e = 1, f = a.length.toString(), h = 1E6, k = 1E6, l = !1, m = !1, g = 0; g < b.length; g++)
        b[g].maxSize && "number" === typeof b[g].maxSize && (m = !0, 1E6 == h && (h = b[g].maxSize, e = d = 1), b[g].maxSize >= f && b[g].maxSize <= k ? (k = b[g].maxSize, l = !0, e = g + 1) : b[g].maxSize >= h && (h = b[g].maxSize, d = g + 1));
    return m ? (e = l ? Math.min(e, b.length) : d, {text: f,index: e}) : c.calculator_old_(a, b.length)
},calculator_old_: function(a, b) {
    for (var c = 0, d = a.length.toString(), e = d; 0 !== e; )
        e = parseInt(e / 10, 10), c++;
    c = Math.min(c, b);
    return {text: d,index: c}
}});
})();

