(function(a) {
    var b = {
        defaultRadius: 40,
        defaultRenderer: "canvas2d",
        defaultGradient: {
            "0.25": "rgb(0,0,255)",
            "0.55": "rgb(0,255,0)",
            "0.85": "yellow",
            1: "rgb(255,0,0)"
        },
        defaultMaxOpacity: 1,
        defaultMinOpacity: 0,
        defaultBlur: 0.85,
        defaultXField: "x",
        defaultYField: "y",
        defaultValueField: "value",
        plugins: {}
    }
      , c = function() {
        var a = function(a) {
            this._coordinator = {};
            this._data = [];
            this._radi = [];
            this._min = 0;
            this._max = 1;
            this._xField = a.xField || a.defaultXField;
            this._yField = a.yField || a.defaultYField;
            this._valueField = a.valueField || a.defaultValueField;
            a.radius && (this._cfgRadius = a.radius)
        }
          , d = b.defaultRadius;
        a.prototype = {
            _organiseData: function(a, e) {
                var l = a[this._xField]
                  , b = a[this._yField]
                  , y = this._radi
                  , c = this._data
                  , k = this._max
                  , f = this._min
                  , g = a[this._valueField] || 1
                  , h = a.radius || this._cfgRadius || d;
                c[l] || (c[l] = [],
                y[l] = []);
                c[l][b] ? c[l][b] += g : (c[l][b] = g,
                y[l][b] = h);
                return c[l][b] > k ? (e ? this.setDataMax(c[l][b]) : this._max = c[l][b],
                !1) : {
                    x: l,
                    y: b,
                    value: g,
                    radius: h,
                    min: f,
                    max: k
                }
            },
            _unOrganizeData: function() {
                var a = [], e = this._data, l = this._radi, b;
                for (b in e)
                    for (var c in e[b])
                        a.push({
                            x: b,
                            y: c,
                            radius: l[b][c],
                            value: e[b][c]
                        });
                return {
                    min: this._min,
                    max: this._max,
                    data: a
                }
            },
            _onExtremaChange: function() {
                this._coordinator.emit("extremachange", {
                    min: this._min,
                    max: this._max
                })
            },
            addData: function(a) {
                if (0 < a.length)
                    for (var e = a.length; e--; )
                        this.addData.call(this, a[e]);
                else
                    (a = this._organiseData(a, !0)) && this._coordinator.emit("renderpartial", {
                        min: this._min,
                        max: this._max,
                        data: [a]
                    });
                return this
            },
            setData: function(a) {
                var e = a.data
                  , b = e.length;
                this._max = a.max;
                this._min = a.min || 0;
                this._data = [];
                this._radi = [];
                for (a = 0; a < b; a++)
                    this._organiseData(e[a], !1);
                this._onExtremaChange();
                this._coordinator.emit("renderall", this._getInternalData());
                return this
            },
            removeData: function() {},
            setDataMax: function(a) {
                this._max = a;
                this._onExtremaChange();
                this._coordinator.emit("renderall", this._getInternalData());
                return this
            },
            setDataMin: function(a) {
                this._min = a;
                this._onExtremaChange();
                this._coordinator.emit("renderall", this._getInternalData());
                return this
            },
            setCoordinator: function(a) {
                this._coordinator = a
            },
            _getInternalData: function() {
                return {
                    max: this._max,
                    min: this._min,
                    data: this._data,
                    radi: this._radi
                }
            },
            getData: function() {
                return this._unOrganizeData()
            }
        };
        return a
    }()
      , d = function() {
        function a(e) {
            var l = e.container
              , c = this.shadowCanvas = document.createElement("canvas")
              , d = this.canvas = e.canvas || document.createElement("canvas");
            this._renderBoundaries = [1E4, 1E4, 0, 0];
            var k = getComputedStyle(e.container) || {};
            d.className = "heatmap-canvas";
            this._width = d.width = c.width = +k.width.replace(/px/, "");
            this._height = d.height = c.height = +k.height.replace(/px/, "");
            this.shadowCtx = c.getContext("2d");
            this.ctx = d.getContext("2d");
            d.style.cssText = c.style.cssText = "position:absolute;left:0;top:0;";
            l.style.position = "relative";
            l.appendChild(d);
            this._palette = b(e);
            this._templates = {};
            this._setStyles(e)
        }
        var b = function(e) {
            e = e.gradient || e.defaultGradient;
            var a = document.createElement("canvas")
              , b = a.getContext("2d");
            a.width = 256;
            a.height = 1;
            var a = b.createLinearGradient(0, 0, 256, 1), c;
            for (c in e)
                a.addColorStop(c, e[c]);
            b.fillStyle = a;
            b.fillRect(0, 0, 256, 1);
            return b.getImageData(0, 0, 256, 1).data
        }
          , c = function(e) {
            var a = []
              , b = e.min
              , c = e.max
              , d = e.radi;
            e = e.data;
            for (var k = Object.keys(e), g = k.length; g--; )
                for (var f = k[g], h = Object.keys(e[f]), m = h.length; m--; ) {
                    var p = h[m];
                    a.push({
                        x: f,
                        y: p,
                        value: e[f][p],
                        radius: d[f][p]
                    })
                }
            return {
                min: b,
                max: c,
                data: a
            }
        };
        a.prototype = {
            renderPartial: function(e) {
                this._drawAlpha(e);
                this._colorize()
            },
            renderAll: function(e) {
                this._clear();
                this._drawAlpha(c(e));
                this._colorize()
            },
            _updateGradient: function(e) {
                this._palette = b(e)
            },
            updateConfig: function(e) {
                e.gradient && this._updateGradient(e);
                this._setStyles(e)
            },
            setDimensions: function(e, a) {
                this._width = e;
                this._height = a;
                this.canvas.width = this.shadowCanvas.width = e;
                this.canvas.height = this.shadowCanvas.height = a
            },
            _clear: function() {
                this.shadowCtx.clearRect(0, 0, this._width, this._height);
                this.ctx.clearRect(0, 0, this._width, this._height)
            },
            _setStyles: function(a) {
                this._blur = 0 == a.blur ? 0 : a.blur || a.defaultBlur;
                a.backgroundColor && (this.canvas.style.backgroundColor = a.backgroundColor);
                this._opacity = 255 * (a.opacity || 0);
                this._maxOpacity = 255 * (a.maxOpacity || a.defaultMaxOpacity);
                this._minOpacity = 255 * (a.minOpacity || a.defaultMinOpacity)
            },
            _drawAlpha: function(a) {
                var b = this._min = a.min
                  , c = this._max = a.max;
                a = a.data || [];
                for (var d = a.length, k = 1 - this._blur; d--; ) {
                    var f = a[d], g = f.radius, h = f.value, m = f.x - g, f = f.y - g, n = this.shadowCtx, p;
                    if (this._templates[g])
                        p = this._templates[g];
                    else {
                        p = this._templates;
                        var t = g
                          , r = g
                          , u = k
                          , v = document.createElement("canvas")
                          , s = v.getContext("2d")
                          , w = r
                          , x = r;
                        v.width = v.height = 2 * r;
                        1 == u ? (s.beginPath(),
                        s.arc(w, x, r, 0, 2 * Math.PI, !1),
                        s.fillStyle = "rgba(0,0,0,1)",
                        s.fill()) : (u = s.createRadialGradient(w, x, r * u, w, x, r),
                        u.addColorStop(0, "rgba(0,0,0,1)"),
                        u.addColorStop(1, "rgba(0,0,0,0)"),
                        s.fillStyle = u,
                        s.fillRect(0, 0, 2 * r, 2 * r));
                        p[t] = p = v
                    }
                    n.globalAlpha = h / Math.abs(c - b);
                    n.drawImage(p, m, f);
                    m < this._renderBoundaries[0] && (this._renderBoundaries[0] = m);
                    f < this._renderBoundaries[1] && (this._renderBoundaries[1] = f);
                    m + 2 * g > this._renderBoundaries[2] && (this._renderBoundaries[2] = m + 2 * g);
                    f + 2 * g > this._renderBoundaries[3] && (this._renderBoundaries[3] = f + 2 * g)
                }
            },
            _colorize: function() {
                var a = this._renderBoundaries[0]
                  , b = this._renderBoundaries[1]
                  , c = this._renderBoundaries[2] - a
                  , d = this._renderBoundaries[3] - b
                  , f = this._width
                  , g = this._height
                  , k = this._opacity
                  , h = this._maxOpacity
                  , m = this._minOpacity;
                0 > a && (a = 0);
                0 > b && (b = 0);
                a + c > f && (c = f - a);
                b + d > g && (d = g - b);
                for (var c = this.shadowCtx.getImageData(a, b, c, d), d = c.data, f = d.length, g = this._palette, n = 3; n < f; n += 4) {
                    var p = d[n]
                      , t = 4 * p;
                    t && (p = 0 < k ? k : p < h ? p < m ? m : p : h,
                    d[n - 3] = g[t],
                    d[n - 2] = g[t + 1],
                    d[n - 1] = g[t + 2],
                    d[n] = p)
                }
                c.data = d;
                this.ctx.putImageData(c, a, b);
                this._renderBoundaries = [1E3, 1E3, 0, 0]
            },
            getValueAt: function(a) {
                a = this.shadowCtx.getImageData(a.x, a.y, 1, 1).data[3];
                return Math.abs(this._max - this._min) * (a / 255) >> 0
            },
            getDataURL: function() {
                return this.canvas.toDataURL()
            }
        };
        return a
    }()
      , g = function() {
        var a = !1;
        "canvas2d" === b.defaultRenderer && (a = d);
        return a
    }()
      , h = {
        merge: function() {
            for (var a = {}, b = arguments.length, c = 0; c < b; c++) {
                var e = arguments[c], d;
                for (d in e)
                    a[d] = e[d]
            }
            return a
        }
    }
      , f = function() {
        function a(e) {
            e = this._config = h.merge(b, e || {});
            this._coordinator = new d;
            if (e.plugin)
                if (e = e.plugin,
                b.plugins[e])
                    e = b.plugins[e],
                    this._renderer = e.renderer,
                    this._store = e.store;
                else
                    throw Error("Plugin '" + e + "' not found. Maybe it was not registered.");
            else
                this._renderer = new g(e),
                this._store = new c(e);
            f(this)
        }
        var d = function() {
            function a() {
                this.cStore = {}
            }
            a.prototype = {
                on: function(a, b, e) {
                    var c = this.cStore;
                    c[a] || (c[a] = []);
                    c[a].push(function(a) {
                        return b.call(e, a)
                    })
                },
                emit: function(a, b) {
                    var e = this.cStore;
                    if (e[a])
                        for (var c = e[a].length, d = 0; d < c; d++)
                            (0,
                            e[a][d])(b)
                }
            };
            return a
        }()
          , f = function(a) {
            var b = a._renderer
              , c = a._coordinator
              , d = a._store;
            c.on("renderpartial", b.renderPartial, b);
            c.on("renderall", b.renderAll, b);
            c.on("extremachange", function(b) {
                a._config.onExtremaChange && a._config.onExtremaChange({
                    min: b.min,
                    max: b.max,
                    gradient: a._config.gradient || a._config.defaultGradient
                })
            });
            d.setCoordinator(c)
        };
        a.prototype = {
            addData: function() {
                this._store.addData.apply(this._store, arguments);
                return this
            },
            removeData: function() {
                this._store.removeData && this._store.removeData.apply(this._store, arguments);
                return this
            },
            setData: function() {
                this._store.setData.apply(this._store, arguments);
                return this
            },
            setDataMax: function() {
                this._store.setDataMax.apply(this._store, arguments);
                return this
            },
            setDataMin: function() {
                this._store.setDataMin.apply(this._store, arguments);
                return this
            },
            configure: function(a) {
                this._config = h.merge(this._config, a);
                this._renderer.updateConfig(this._config);
                this._coordinator.emit("renderall", this._store._getInternalData());
                return this
            },
            repaint: function() {
                this._coordinator.emit("renderall", this._store._getInternalData());
                return this
            },
            getData: function() {
                return this._store.getData()
            },
            getDataURL: function() {
                return this._renderer.getDataURL()
            },
            getValueAt: function(a) {
                return this._store.getValueAt ? this._store.getValueAt(a) : this._renderer.getValueAt ? this._renderer.getValueAt(a) : null
            }
        };
        return a
    }();
    a.h337 = {
        create: function(a) {
            return new f(a)
        },
        register: function(a, c) {
            b.plugins[a] = c
        }
    }
}
)(this || window);
(function() {
    IMAP.HeatmapOverlay = IMAP.Class({
        _mEvtm: !1,
        _mEvtd: !1,
        _mEvtz: !1,
        initialize: function(a, b) {
            this._id = "_ld_heatmap_" + IMAP.Function.createUniqueID();
            this._options = b || {};
            this._max = 1;
            this._min = 0;
            this.bounds = null;
            this._datas = [];
            this.setData(a || []);
            this._element = null
        },
        setData: function(a) {
            var b = this._options;
            a = a || [];
            this._max = "number" == typeof a.max ? a.max : 1;
            this._min = "number" == typeof a.min ? a.min : 0;
            var c = b.lngField || "lng"
              , d = b.latField || "lat"
              , b = b.valueField || "count";
            a = a.data;
            var g = [];
            if (a = this._convert(a, c, d)) {
                for (var h = a.length; h--; ) {
                    var f = a[h]
                      , k = {
                        lnglat: new IMAP.LngLat(f[c],f[d])
                    };
                    k[b] = f[b];
                    f.radius && (k.radius = f.radius);
                    g.push(k)
                }
                this._datas = g;
                this.update()
            }
        },
        addData: function(a) {
            if (a) {
                var b = this
                  , c = !1
                  , d = b._max
                  , g = b._min
                  , h = b._options
                  , f = h.lngField || "lng"
                  , k = h.latField || "lat"
                  , m = h.valueField || "count"
                  , h = function(a) {
                    var c = {
                        lnglat: new IMAP.LngLat(a[f],a[k])
                    };
                    c[m] = a[m];
                    a.radius && (c.radius = a.radius);
                    d = Math.max(d, c[m]);
                    g = Math.min(g, c[m]);
                    b._datas.push(c)
                };
                if (a instanceof Array) {
                    a = b._convert(a, f, k);
                    var n = a.length;
                    if (0 < n)
                        for (c = !0; n--; )
                            h(a[n])
                } else
                    c = !0,
                    a = b._convert([a], f, k)[0],
                    h(a);
                c && (b._max = d,
                b._min = g,
                b.update())
            }
        },
        update: function() {
            var a = this._datas
              , b = this._map
              , c = this._options;
            if (b) {
                var d = b.getZoom()
                  , g = b.getBounds()
                  , c = c.latField || "count";
                this.resize(!0);
                var h = a.length
                  , g = {
                    max: this._max,
                    min: this._min
                }
                  , f = 0
                  , k = 0;
                if (0 < h) {
                    for (var m = [], g = b.getBounds(), n = b.lnglatToLayerPixel(g.northeast), e = b.lnglatToLayerPixel(g.southwest), n = n.y, e = e.x; h--; ) {
                        var l = a[h]
                          , q = l.lnglat
                          , l = l[c]
                          , f = Math.max(l, f)
                          , k = Math.min(l, k);
                        g.containsLngLat(q) && (q = b.lnglatToLayerPixel(q, !0),
                        q = new IMAP.Pixel(q.x - e,q.y - n),
                        m.push({
                            x: q.x,
                            y: q.y,
                            value: l,
                            radius: 2 * d
                        }))
                    }
                    g = {
                        max: f,
                        min: k,
                        data: m
                    };
                    this._heatmap.setData(g)
                }
            }
        },
        resize: function(a) {
            var b = this._map;
            if (b) {
                var c = b.getSize()
                  , b = c.width
                  , c = c.height;
                if (this._width != b || this._height != c) {
                    this._width = b;
                    this._height = c;
                    var d = this._element;
                    d.style.height = c + "px";
                    d.style.width = b + "px";
                    IMAP.Browser.isChrome() ? this._heatmap._renderer.setDimensions(b, c) : (d = d.childNodes[0],
                    d.height = c,
                    d.width = b);
                    a || this.update()
                }
            }
        },
        _redraw: function() {
            var a = this._map
              , b = this._element;
            if (a && b) {
                var c = a.getBounds()
                  , d = a.lnglatToLayerPixel(c.northeast)
                  , a = a.lnglatToLayerPixel(c.southwest)
                  , d = d.y;
                b.style.left = a.x + "px";
                b.style.top = d + "px";
                this.resize(!0);
                this.update()
            }
        },
        _createElement: function() {
            var a = this._map;
            if (!this._element && a) {
                var b = this._height
                  , c = this._width
                  , d = IMAP.Function.createElement({
                    name: "div",
                    cssText: "position:absolute;left:0px;top:0px;border:0px;z-index:1000;width:" + (c - 1) + "px;height:" + (b - 1) + "px;"
                });
                this._element = this._options.container = d;
                this._heatmap = h337.create(this._options);
                d.style.height = b + 1 + "px";
                d.style.width = c + 1 + "px";
                IMAP.Function.isInDocument(d) || a.getOverlayLayer().getElement().overlayPane.appendChild(d);
                IMAP.Browser.isChrome() ? this._heatmap._renderer.setDimensions(c + 1, b + 1) : (a = d.childNodes[0],
                a.height = b + 1,
                a.width = c + 1);
                this._redraw()
            }
        },
        getElement: function() {
            return this._element
        },
        _draw: function() {
            this._createElement()
        },
        setMap: function(a) {
            if (a instanceof IMAP.Map) {
                this._map = a;
                var b = a.getSize();
                this._width = b.width;
                this._height = b.height;
                this._mEvtz = a.addEventListener(IMAP.Constants.ZOOM_END, this._redraw, this);
                this._mEvtd = a.addEventListener(IMAP.Constants.DRAG_END, this._redraw, this);
                this._mEvtm = a.addEventListener(IMAP.Constants.MOVE_END, this._redraw, this);
                this._convert(this._datas);
                this._draw()
            } else
                this._mEvtz && (this._map.removeEventListener(this._mEvtz),
                this._map.removeEventListener(this._mEvtd),
                this._map.removeEventListener(this._mEvtm),
                this._mEvtz = this._mEvtd = this._mEvtm = null),
                this._destroy()
        },
        _convert: function(a, b, c) {
            var d = this._map;
            if (!d)
                return a;
            var g = d.gpsType()
              , h = IMAP.Constants.GPS_GCJ02;
            if (g != h) {
                for (var d = [], f, k = 0, m = a.length; k < m; ++k)
                    f = a[k],
                    f.lnglat ? d.push({
                        lng: f.lnglat.lng,
                        lat: f.lnglat.lat
                    }) : d.push({
                        lng: f[b],
                        lat: f[c]
                    });
                d = IMAP.convert(g, h, d);
                g = 0;
                for (h = a.length; g < h; ++g)
                    f = a[g],
                    f.lnglat ? f.lnglat = d[g] : (f[b] = d[g].lng,
                    f[c] = d[g].lat)
            }
            return a
        },
        _destroy: function(a) {
            (a = this._element) && a.parentNode && a.parentNode.removeChild(a);
            this._map = this._element = null
        },
        getMap: function() {
            return this._map
        },
        getId: function() {
            return this._id
        }
    });
    IMAP.HeatmapOverlayOptions = IMAP.Class({
        visible: null,
        radius: null,
        gradient: null,
        opacity: null
    })
}
)();
